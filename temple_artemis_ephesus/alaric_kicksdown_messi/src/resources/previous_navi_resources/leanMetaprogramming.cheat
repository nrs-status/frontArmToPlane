
(syntax:)
A Term.bracketedBinder matches any kind of binder group that uses some kind of brackets:

    An explicit binder like (x y : A)
    An implicit binder like {x y : A}
    A strict implicit binder, ⦃y z : A⦄ or its ASCII alternative {{y z : A}}
    An instance binder [A] or [x : A] (multiple variables are not allowed here)

Term.optType stands for optional (leading_parser " : " >> termParser)

def Lean.Elab.Term.expandMatchAltsIntoMatch -- expands implicit matches into fun ... => match ... with | ...

(elab:)


elabTerm -- takes Syntax and elaborates into Expr
withSynthesize -- completes the elaboration

toExpr -- transforms a term into Expr; requires importing Mathlib.Tactic.toExpr
mkAdd (toExpr 5) (toExpr 2)

inferType exp -- infers the type of the Expr exp

ppExpr --pretty prints an Expr term

#pattern match on expressions
let_expr 
match_expr

#make mvar and assign
def tst (x : Nat) : Nat :=
  let_mvar% ?m := x + 1;
  ?m + ?m

#raw nat literal
nat_lit

---
 /-The string representation of syntax can be inspected by quoting it in the context of #eval, which can run actions in the command elaboration monad CommandElabM. Because new syntax declarations also equip the pretty printer with instructions for displaying them, the pretty printer requires a configuration object. This context can be constructed with a helper: -/
def getPPContext : CommandElabM PPContext := do
  return {
    env := (← getEnv),
    opts := (← getOptions),
    currNamespace := (← getCurrNamespace),
    openDecls := (← getOpenDecls)
  }
#eval show CommandElabM Unit from do
  let stx ← `(2 + 5)
  let fmt ← ppTerm (← getPPContext) stx
  logInfo fmt

/- Pretty printing wraps lines and inserts indentation automatically. A coercion typically converts the pretty printer's output to the type expected by logInfo, using a default layout width. The width can be controlled by explicitly calling pretty with a named argument. -/
#eval do
  let flowers := #["Rose", "Daffodil", "Lily"]
  let manyFlowers := flowers ++ flowers ++ flowers
  let stx ← `(List.length [$(manyFlowers.map (quote (k := `term))),*])
  let fmt ← ppTerm (← getPPContext) stx
  logInfo (fmt.pretty (width := 40))


/- This syntax for saving notes takes a bulleted list of items, each of which must be aligned at the same column. -/
syntax "note " ppLine withPosition((colEq "• " str ppLine)+) : term

--


/--
Creates a new metavariable of type `type` that will be synthesized using the tactic code.
The `tacticCode` syntax is the full `by ..` syntax.
-/
def mkTacticMVar (type : Expr) (tacticCode : Syntax) (kind : TacticMVarKind) : TermElabM Expr := do
  if ← pure (debug.byAsSorry.get (← getOptions)) <&&> isProp type then
    mkSorry type false
  else
    let mvar ← mkFreshExprMVar type MetavarKind.syntheticOpaque
    let mvarId := mvar.mvarId!
    let ref ← getRef
    registerSyntheticMVar ref mvarId <| SyntheticMVarKind.tactic tacticCode (← saveContext) kind
    return mvar



/--
  Create an auxiliary annotation to make sure we create an `Info` even if `e` is a metavariable.
  See `mkTermInfo`.

  We use this function because some elaboration functions elaborate subterms that may not be immediately
  part of the resulting term. Example:
  ```
  let_mvar% ?m := b; wait_if_type_mvar% ?m; body
  ```
  If the type of `b` is not known, then `wait_if_type_mvar% ?m; body` is postponed and just returns a fresh
  metavariable `?n`. The elaborator for
  ```
  let_mvar% ?m := b; wait_if_type_mvar% ?m; body
  ```
  returns `mkSaveInfoAnnotation ?n` to make sure the info nodes created when elaborating `b` are "saved".
  This is a bit hackish, but elaborators like `let_mvar%` are rare.
-/
def mkSaveInfoAnnotation (e : Expr) : Expr ...


/--
Pushes a new leaf node to the info tree associating the expression `e` to the syntax `stx`.
As a result, when the user hovers over `stx` they will see the type of `e`, and if `e`
is a constant they will see the constant's doc string.

* `expectedType?`: the expected type of `e` at the point of elaboration, if available
* `lctx?`: the local context in which to interpret `e` (otherwise it will use `← getLCtx`)
* `elaborator`: a declaration name used as an alternative target for go-to-definition
* `isBinder`: if true, this will be treated as defining `e` (which should be a local constant)
  for the purpose of go-to-definition on local variables
* `force`: In patterns, the effect of `addTermInfo` is usually suppressed and replaced
  by a `patternWithRef?` annotation which will be turned into a term info on the
  post-match-elaboration expression. This flag overrides that behavior and adds the term
  info immediately. (See https://github.com/leanprover/lean4/pull/1664.)
-/
def addTermInfo (stx : Syntax) (e : Expr) (expectedType? : Option Expr := none)
    (lctx? : Option LocalContext := none) (elaborator := Name.anonymous)
    (isBinder := false) (force := false) : TermElabM Expr := ..


#elaborate term without expected type. however some elaborations functions postpone elaboration until expected type is known
without_expected_type ...
